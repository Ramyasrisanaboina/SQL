//program to print hello world
SQL> set serveroutput on;
SQL> begin
  2  dbms_output.put_line('hello world');
  3  end;
  4  /
hello world

PL/SQL procedure successfully completed.

//sum of twonumbers
SQL> declare
  2  a integer;
  3  b integer;
  4  c integer;
  5  begin
  6  a:=2;
  7  b:=3;
  8  c:=a+b;
  9  dbms_output.put_line('value of a is'||a);
 10  dbms_output.put_line('value of b is'||b);
 11  dbms_output.put_line('value of c is'||c);
 12  end;
 13  /
value of a is2
value of b is3
value of c is5

PL/SQL procedure successfully completed.
//to print details of a student
SQL> ed
Wrote file afiedt.buf

  1  declare
  2  rollno integer;
  3  name varchar2(30);
  4  age integer;
  5  begin
  6  rollno:=&rollno;
  7  name:='&name';
  8  age:=&age;
  9  dbms_output.put_line('rollno is'||rollno);
 10  dbms_output.put_line('name is'||name);
 11  dbms_output.put_line('age is'||age);
 12* end;
SQL> /
Enter value for rollno: 13
old   6: rollno:=&rollno;
new   6: rollno:=13;
Enter value for name: jimin
old   7: name:='&name';
new   7: name:='jimin';
Enter value for age: 26
old   8: age:=&age;
new   8: age:=26;

PL/SQL procedure successfully completed.

exp9:
//using basic variables and  usage of assignment

SQL> variable a number
SQL> begin
  2  :a:=1;
  3  end;
  4  /

PL/SQL procedure successfully completed.

SQL> print a;

         A
----------
         1

SQL> exec:a:=2;

PL/SQL procedure successfully completed.

SQL> print a;

         A
----------
         2
SQL> define name:=tae;
SP2-0136: DEFINE requires an equal sign (=)
SQL> define name=tae;
SQL> select '&&name' from dual;
old   1: select '&&name' from dual
new   1: select 'tae' from dual

'TA
---
tae

SQL> undefine name;
SQL>  select '&&name' from dual;
Enter value for name: jimin
old   1:  select '&&name' from dual
new   1:  select 'jimin' from dual

'JIMI
-----
jimin

exp 10:
//to check no is even or odd

 declare
 a integer;
 begin
 a:=&a;
 if mod(a,2)=0 then
 dbms_output.put_line('even number'||a);
 else
  dbms_output.put_line('odd number'||a);
  end if;
  end;
 /
//to check which number is bigger
 declare
 a integer;
 b integer;
 begin
 a:=&a;
 b:=&b;
 if(a>b) then
 dbms_output.put_line('a is bigger'||a);
 else
 dbms_output.put_line('b is bigger'||b);
 end if;
 end;
 /
 
 //if-elseif
 
  1  declare
  2  marks integer:=&marks;
  3  begin
  4  if(marks>=75)then
  5  dbms_output.put_line('distinct');
  6  elsif(marks>=60 and marks<75)then
  7  dbms_output.put_line('first class');
  8  elsif(marks>=50 and marks<60)then
  9  dbms_output.put_line('second class');
 10  else
 11  dbms_output.put_line('fail');
 12  end if;
 13* end;
SQL> /
Enter value for marks: 98
old   2: marks integer:=&marks;
new   2: marks integer:=98;
distinct

PL/SQL procedure successfully completed.

//to check bigger number b/w 3 numbers(nested if)


SQL> ed
Wrote file afiedt.buf

  1  declare
  2  a integer;
  3  b integer;
  4  c integer;
  5  begin
  6  a:=&a;
  7  b:=&b;
  8  c:=&c;
  9  if(a>b)then
 10   if(a>c)then
 11      dbms_output.put_line(a||'is bigger');
 12   else
 13       dbms_output.put_line(c||'is bigger');
 14    end if;
 15  elsif(b>c)then
 16     dbms_output.put_line(b||'is bigger');
 17  else
 18       dbms_output.put_line(c||'is bigger');
 19  end if;
 20* end;
SQL> /
Enter value for a: 34
old   6: a:=&a;
new   6: a:=34;
Enter value for b: 35
old   7: b:=&b;
new   7: b:=35;
Enter value for c: 90
old   8: c:=&c;
new   8: c:=90;
90is bigger


PL/SQL procedure successfully completed.

//switch case
SQL> declare
  2  grade char(1):='&grade';
  3  begin
  4  CASE grade
  5  WHEN 'A' THEN dbms_output.put_line('EXCELLENT');
  6  WHEN 'B' THEN dbms_output.put_line('GOOD');
  7  WHEN 'C' THEN dbms_output.put_line('AVERAGE');
  8  WHEN 'D' THEN dbms_output.put_line('BAD');
  9  end CASE;
 10  end;
 11  /
Enter value for grade: A
old   2: grade char(1):='&grade';
new   2: grade char(1):='A';
EXCELLENT

PL/SQL procedure successfully completed.
//simple loop

SQL> ed
Wrote file afiedt.buf

  1  declare
  2  a integer;
  3  n integer;
  4  begin
  5  a:=1;
  6  n:=&n;
  7  loop
  8  dbms_output.put_line(a);
  9  a:=a+1;
 10  exit when a>n;
 11  end loop;
 12* end;
SQL> /
Enter value for n: 10
old   6: n:=&n;
new   6: n:=10;
1
2
3
4
5
6
7
8
9
10

PL/SQL procedure successfully completed.

//while loop
SQL> ed
Wrote file afiedt.buf

  1  declare
  2  a int:=1;
  3  n int:=&n;
  4  begin
  5  while(a<n)loop
  6  dbms_output.put_line(a);
  7  a:=a+1;
  8  end loop;
  9* end;
 10  /
Enter value for n: 10
old   3: n int:=&n;
new   3: n int:=10;
1
2
3
4
5
6
7
8
9


//for loop
SQL> ed
Wrote file afiedt.buf

  1  declare
  2  a int:=1;
  3  n int:=&n;
  4  begin
  5  for a in 1..n
  6  loop
  7  dbms_output.put_line(a);
  8  end loop;
  9* end;
 10  /
Enter value for n: 10
old   3: n int:=&n;
new   3: n int:=10;
1
2
3
4
5
6
7
8
9
10


//to print a table
SQL> ed
Wrote file afiedt.buf

  1  declare
  2  a int:=1;
  3  b int:=&b;
  4  n int:=&n;
  5  begin
  6  for a in 1..n
  7  loop
  8  dbms_output.put_line(b||'*'||a||'='||a*b);
  9  end loop;
 10* end;
 11  /
Enter value for b: 2
old   3: b int:=&b;
new   3: b int:=2;
Enter value for n: 10
old   4: n int:=&n;
new   4: n int:=10;
2*1=2
2*2=4
2*3=6
2*4=8
2*5=10
2*6=12
2*7=14
2*8=16
2*9=18
2*10=20


//to print factorial

SQL> ed
Wrote file afiedt.buf

  1  declare
  2  n int:=&n;
  3  a int:=1;
  4  mul int:=1;
  5  begin
  6  if(n>1)then
  7  for a in 1..n
  8  loop
  9  mul:=mul*a;
 10  end loop;
 11  else
 12  mul:=n;
 13  end if;
 14  dbms_output.put_line(mul);
 15* end;
SQL> /
Enter value for n: 5
old   2: n int:=&n;
new   2: n int:=5;
120
